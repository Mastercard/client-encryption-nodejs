/**
 * @class
 * MC-Api Service
 *
 * Decorator class for OpenAPI client service
 *
 * Act as HTTP Interceptor for the OpenAPI `superagent` HTTP client adding encryption/decryption capabilities for the request/response payload.
 *
 * @param service OpenAPI client service (it can be generated by the swagger code generator)
 * @param config Configuration object describing which field to enable encryption/decryption
 *
 * @module mcapi/Service
 * @version 1.0.0
 */
function Service(service, config) {

  const FieldLevelEncryption = require('./fle/field-level-encryption');

  this.fle = new FieldLevelEncryption(config);

  function override(object, methodName, callback, outObj) {
    object[methodName] = callback(object[methodName], outObj);
  }

  if (!service || !(service.ApiClient) || !(service.ApiClient.instance)) {
    throw new Error("service should be a valid OpenAPI client.");
  }

  override(service.ApiClient.instance, "callApi", function (original, outObj) {
    return function () {
      const endpoint = arguments[0];
      const header = arguments[5];
      const body = arguments[7];
      const cb = arguments[arguments.length - 1];
      if (body) {
        const encrypted = outObj.fle.encrypt(endpoint, header, body);
        arguments[5] = encrypted.header;
        arguments[7] = encrypted.body;
      }
      arguments[arguments.length - 1] = function (error, data, response) {
        if (response && response.body) {
          const decryptedPayload = outObj.fle.decrypt(response);
          response.body = decryptedPayload;
          data = decryptedPayload;
        }
        cb(error, data, response);
      };
      return original.apply(this, arguments);
    };
  }, this);

  return service;
}

module.exports = Service;
module.exports.FieldLevelEncryption = require('./fle/field-level-encryption');
